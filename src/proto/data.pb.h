// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_data_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_data_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_data_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_data_2eproto;
namespace habit_data {
class habit_data;
struct habit_dataDefaultTypeInternal;
extern habit_dataDefaultTypeInternal _habit_data_default_instance_;
}  // namespace habit_data
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace habit_data {

// ===================================================================


// -------------------------------------------------------------------

class habit_data final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:habit_data.habit_data) */ {
 public:
  inline habit_data() : habit_data(nullptr) {}
  ~habit_data() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR habit_data(
      ::google::protobuf::internal::ConstantInitialized);

  inline habit_data(const habit_data& from) : habit_data(nullptr, from) {}
  inline habit_data(habit_data&& from) noexcept
      : habit_data(nullptr, std::move(from)) {}
  inline habit_data& operator=(const habit_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline habit_data& operator=(habit_data&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const habit_data& default_instance() {
    return *internal_default_instance();
  }
  static inline const habit_data* internal_default_instance() {
    return reinterpret_cast<const habit_data*>(
        &_habit_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(habit_data& a, habit_data& b) { a.Swap(&b); }
  inline void Swap(habit_data* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(habit_data* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  habit_data* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<habit_data>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const habit_data& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const habit_data& from) { habit_data::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(habit_data* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "habit_data.habit_data"; }

 protected:
  explicit habit_data(::google::protobuf::Arena* arena);
  habit_data(::google::protobuf::Arena* arena, const habit_data& from);
  habit_data(::google::protobuf::Arena* arena, habit_data&& from) noexcept
      : habit_data(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHabitIdFieldNumber = 2,
    kDeviceTimestampFieldNumber = 1,
    kDataFieldNumber = 3,
    kStartTimestampFieldNumber = 4,
    kStopTimestampFieldNumber = 5,
  };
  // string habit_id = 2;
  void clear_habit_id() ;
  const std::string& habit_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_habit_id(Arg_&& arg, Args_... args);
  std::string* mutable_habit_id();
  PROTOBUF_NODISCARD std::string* release_habit_id();
  void set_allocated_habit_id(std::string* value);

  private:
  const std::string& _internal_habit_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_habit_id(
      const std::string& value);
  std::string* _internal_mutable_habit_id();

  public:
  // int32 device_timestamp = 1;
  void clear_device_timestamp() ;
  ::int32_t device_timestamp() const;
  void set_device_timestamp(::int32_t value);

  private:
  ::int32_t _internal_device_timestamp() const;
  void _internal_set_device_timestamp(::int32_t value);

  public:
  // int32 data = 3;
  void clear_data() ;
  ::int32_t data() const;
  void set_data(::int32_t value);

  private:
  ::int32_t _internal_data() const;
  void _internal_set_data(::int32_t value);

  public:
  // int32 start_timestamp = 4;
  void clear_start_timestamp() ;
  ::int32_t start_timestamp() const;
  void set_start_timestamp(::int32_t value);

  private:
  ::int32_t _internal_start_timestamp() const;
  void _internal_set_start_timestamp(::int32_t value);

  public:
  // int32 stop_timestamp = 5;
  void clear_stop_timestamp() ;
  ::int32_t stop_timestamp() const;
  void set_stop_timestamp(::int32_t value);

  private:
  ::int32_t _internal_stop_timestamp() const;
  void _internal_set_stop_timestamp(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:habit_data.habit_data)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      38, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr habit_id_;
    ::int32_t device_timestamp_;
    ::int32_t data_;
    ::int32_t start_timestamp_;
    ::int32_t stop_timestamp_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// habit_data

// int32 device_timestamp = 1;
inline void habit_data::clear_device_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_timestamp_ = 0;
}
inline ::int32_t habit_data::device_timestamp() const {
  // @@protoc_insertion_point(field_get:habit_data.habit_data.device_timestamp)
  return _internal_device_timestamp();
}
inline void habit_data::set_device_timestamp(::int32_t value) {
  _internal_set_device_timestamp(value);
  // @@protoc_insertion_point(field_set:habit_data.habit_data.device_timestamp)
}
inline ::int32_t habit_data::_internal_device_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_timestamp_;
}
inline void habit_data::_internal_set_device_timestamp(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_timestamp_ = value;
}

// string habit_id = 2;
inline void habit_data::clear_habit_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.habit_id_.ClearToEmpty();
}
inline const std::string& habit_data::habit_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:habit_data.habit_data.habit_id)
  return _internal_habit_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void habit_data::set_habit_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.habit_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:habit_data.habit_data.habit_id)
}
inline std::string* habit_data::mutable_habit_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_habit_id();
  // @@protoc_insertion_point(field_mutable:habit_data.habit_data.habit_id)
  return _s;
}
inline const std::string& habit_data::_internal_habit_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.habit_id_.Get();
}
inline void habit_data::_internal_set_habit_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.habit_id_.Set(value, GetArena());
}
inline std::string* habit_data::_internal_mutable_habit_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.habit_id_.Mutable( GetArena());
}
inline std::string* habit_data::release_habit_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:habit_data.habit_data.habit_id)
  return _impl_.habit_id_.Release();
}
inline void habit_data::set_allocated_habit_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.habit_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.habit_id_.IsDefault()) {
          _impl_.habit_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:habit_data.habit_data.habit_id)
}

// int32 data = 3;
inline void habit_data::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_ = 0;
}
inline ::int32_t habit_data::data() const {
  // @@protoc_insertion_point(field_get:habit_data.habit_data.data)
  return _internal_data();
}
inline void habit_data::set_data(::int32_t value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:habit_data.habit_data.data)
}
inline ::int32_t habit_data::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_;
}
inline void habit_data::_internal_set_data(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_ = value;
}

// int32 start_timestamp = 4;
inline void habit_data::clear_start_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_timestamp_ = 0;
}
inline ::int32_t habit_data::start_timestamp() const {
  // @@protoc_insertion_point(field_get:habit_data.habit_data.start_timestamp)
  return _internal_start_timestamp();
}
inline void habit_data::set_start_timestamp(::int32_t value) {
  _internal_set_start_timestamp(value);
  // @@protoc_insertion_point(field_set:habit_data.habit_data.start_timestamp)
}
inline ::int32_t habit_data::_internal_start_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_timestamp_;
}
inline void habit_data::_internal_set_start_timestamp(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_timestamp_ = value;
}

// int32 stop_timestamp = 5;
inline void habit_data::clear_stop_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stop_timestamp_ = 0;
}
inline ::int32_t habit_data::stop_timestamp() const {
  // @@protoc_insertion_point(field_get:habit_data.habit_data.stop_timestamp)
  return _internal_stop_timestamp();
}
inline void habit_data::set_stop_timestamp(::int32_t value) {
  _internal_set_stop_timestamp(value);
  // @@protoc_insertion_point(field_set:habit_data.habit_data.stop_timestamp)
}
inline ::int32_t habit_data::_internal_stop_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stop_timestamp_;
}
inline void habit_data::_internal_set_stop_timestamp(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stop_timestamp_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace habit_data


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_data_2eproto_2epb_2eh
