// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_config_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_config_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_config_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_config_2eproto;
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum Type : int {
  ERROR_INVALID = 0,
  COUNT = 1,
  TIME = 2,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Type_IsValid(int value);
extern const uint32_t Type_internal_data_[];
constexpr Type Type_MIN = static_cast<Type>(0);
constexpr Type Type_MAX = static_cast<Type>(2);
constexpr int Type_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
Type_descriptor();
template <typename T>
const std::string& Type_Name(T value) {
  static_assert(std::is_same<T, Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Type_Name(static_cast<Type>(value));
}
template <>
inline const std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Type_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Type_Parse(absl::string_view name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
      Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Config final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Config(
      ::google::protobuf::internal::ConstantInitialized);

  inline Config(const Config& from) : Config(nullptr, from) {}
  inline Config(Config&& from) noexcept
      : Config(nullptr, std::move(from)) {}
  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
        &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Config& a, Config& b) { a.Swap(&b); }
  inline void Swap(Config* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Config>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Config& from) { Config::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Config* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Config"; }

 protected:
  explicit Config(::google::protobuf::Arena* arena);
  Config(::google::protobuf::Arena* arena, const Config& from);
  Config(::google::protobuf::Arena* arena, Config&& from) noexcept
      : Config(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimestampFieldNumber = 1,
    kIdFieldNumber = 2,
    kSideFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // int32 timestamp = 1;
  void clear_timestamp() ;
  ::int32_t timestamp() const;
  void set_timestamp(::int32_t value);

  private:
  ::int32_t _internal_timestamp() const;
  void _internal_set_timestamp(::int32_t value);

  public:
  // int32 id = 2;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 side = 3;
  void clear_side() ;
  ::int32_t side() const;
  void set_side(::int32_t value);

  private:
  ::int32_t _internal_side() const;
  void _internal_set_side(::int32_t value);

  public:
  // .Type type = 4;
  void clear_type() ;
  ::Type type() const;
  void set_type(::Type value);

  private:
  ::Type _internal_type() const;
  void _internal_set_type(::Type value);

  public:
  // @@protoc_insertion_point(class_scope:Config)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t timestamp_;
    ::int32_t id_;
    ::int32_t side_;
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Config

// int32 timestamp = 1;
inline void Config::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = 0;
}
inline ::int32_t Config::timestamp() const {
  // @@protoc_insertion_point(field_get:Config.timestamp)
  return _internal_timestamp();
}
inline void Config::set_timestamp(::int32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Config.timestamp)
}
inline ::int32_t Config::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void Config::_internal_set_timestamp(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = value;
}

// int32 id = 2;
inline void Config::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0;
}
inline ::int32_t Config::id() const {
  // @@protoc_insertion_point(field_get:Config.id)
  return _internal_id();
}
inline void Config::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Config.id)
}
inline ::int32_t Config::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void Config::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = value;
}

// int32 side = 3;
inline void Config::clear_side() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.side_ = 0;
}
inline ::int32_t Config::side() const {
  // @@protoc_insertion_point(field_get:Config.side)
  return _internal_side();
}
inline void Config::set_side(::int32_t value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:Config.side)
}
inline ::int32_t Config::_internal_side() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.side_;
}
inline void Config::_internal_set_side(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.side_ = value;
}

// .Type type = 4;
inline void Config::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::Type Config::type() const {
  // @@protoc_insertion_point(field_get:Config.type)
  return _internal_type();
}
inline void Config::set_type(::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Config.type)
}
inline ::Type Config::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Type>(_impl_.type_);
}
inline void Config::_internal_set_type(::Type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Type>() {
  return ::Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_config_2eproto_2epb_2eh
